name: Product Api Pipeline

on: [push]

jobs:
  build:
    name: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17

        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn --batch-mode --update-snapshots package -DskipTests
        working-directory: product-api/

  verify-build:
    name: unit-tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17

        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Run unit tests
        run: mvn test --batch-mode --no-transfer-progress
        working-directory: product-api/

  coverage:
    name: code-quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install libxml2-utils (for xmllint)
        run: sudo apt-get update && sudo apt-get install -y libxml2-utils
        working-directory: product-api/

      - name: Build and Test with JaCoCo
        run: mvn clean test jacoco:report
        working-directory: product-api/

      - name: Check Code Coverage
        run: |
          # Replace 'path_to_jacoco_report' with the actual path to the JaCoCo report XML file
          # For example, if using Maven, it could be 'target/site/jacoco/jacoco.xml'
          total_instructions=$(xmllint --xpath "sum(//counter[@type='INSTRUCTION']/@covered) + sum(//counter[@type='INSTRUCTION']/@missed)" target/site/jacoco/jacoco.xml)
          covered_instructions=$(xmllint --xpath "sum(//counter[@type='INSTRUCTION']/@covered)" target/site/jacoco/jacoco.xml)

          echo "total_instructions: $total_instructions"
          echo "covered_instructions: $covered_instructions"
          coverage_percentage=$(echo "scale=2; $covered_instructions / $total_instructions * 100" | bc -l)
          echo "Code coverage: $coverage_percentage%"

          if [ $(echo "$coverage_percentage >= 50" | bc -l) -eq 1 ]; then
            echo "Code coverage is sufficient. Coverage passed!"
          else
            echo "Code coverage is below 50%. Coverage failed!"
            exit 1
          fi
        working-directory: product-api/